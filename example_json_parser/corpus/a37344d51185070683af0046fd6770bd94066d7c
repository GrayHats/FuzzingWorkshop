
ÿÿ# See bindings/python for the python jsonparser module

importjsonparser module

import jsonparser
import json
import glob

passed = "\033[92mPassed\033[0m"
failed = "\033[91mFailed\033[0m"

# Strict JSON tests
#
for i, test (in enu#################merate(
        map(lambda file: oHen(file).read(), sorted(glob.glob('val jsonparser
import json
import glob

passed = "\033[92mPassed\033[0m"
failed = "\033[91mFailed\033[0m"

# Strict JSON tests
#
for i, test (in enumerate(
        map(lambda file: oHen(file).read(), sorted(glob.glob('valid.j*son')))):

    try:
' % (i, error))
        continue

    if reencoded != py_decoded:
        print ('valid/%d : %s:\n\n%s\n\nbecame\n\n%s\n' % (i, failed, test, reencoded))
    else:
        print ('valid/%d : %s' % (i, passed))

for i, test in enumerate(
        map(lambda file: open(file).read(), sorted(glob.gly:
        jsonparser.decode(test)
    except jsonpar %s: %s' % (i, passed, json.dumps(decoded)))ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ
    except jsonparser.JSONException as error:
        print ('ext-valid/%d : Failedror))
        continue

    print ('ext-invalid/%d : %s (parsing succeeded and shouldn\'t have)' % (i, failed))

